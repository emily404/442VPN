import random
import math

def genPrime():
	p = random.randint(2**1000, 2**1002)
	n = 2
	while n < math.ceil(p ** 0.5):
		if p % n == 0:
			return 0
	return p 

		 

# public key exchange using the Diffie-Hellman algorithm
# two parties each pick secret random integer a and b and publicly decide base b and modulo p coprime to b
# session key is generated as b^ab mod p
# each player compute "half keys" b ^ a and b ^ b respectively, and exchange them
# take the half keys and take it to the power of b or a respectively to get b^ab mod p
class DiffieHellman:


	SECRET_MAX_VAL = pow(2, 10)
	SECRET_MIN_VAL = pow(2, 0)

	def __init__(self, modulo, base):
		self.modulo = modulo
		self.base = base
		# self.SECRET_MAX_VAL 
		# self.SECRET_MIN_VAL 





# generate a new secret, 
	def genSecret(self):
		self.secret = random.randint(self.SECRET_MIN_VAL, self.SECRET_MAX_VAL)

# generate key with secret generated by method genSecret
# 
	def sessionKeyGen(self):
		#gen secret
		self.genSecret()
		sKey = pow(self.base, self.secret, self.modulo)
		return (sKey, self.secret)


	def sessionKeyDecrypt(self, sKey):
		return pow(sKey, self.secret, self.modulo)